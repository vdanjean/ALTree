#!/usr/bin/perl

#Ce programme etiquette les haplotypes malades (ajout d'un G) ou témoins (ajout d'un C), en fonction d'un seuil de malade et témoins qui le porte.
#Le programme prend en entrée un fichier .paup, et redonne un autre .paup

use strict;
use diagnostics;
use warnings;
use Getopt::Std;

our($opt_h,$opt_i, $opt_o, $opt_s, $opt_p, $opt_t, $opt_l, $opt_j);


sub DefineAncDer {
    my $data_type=shift;
    if ($data_type == 0) {
	my $tem=0;
	my $mal=1;
	return ($tem, $mal);
    } elsif ($data_type == 1) {
	my $tem="C";
	my $mal="G";
	return ($tem, $mal);	
    }
}

sub ReadCorrespond 
{
    my($name_correspond) =shift;
    my($ligne, @tableau);
    my(%correspondance);
    open (CORRESP, '<', $name_correspond) || die "Unable to open file $name_correspond: $!\n";
    while ($ligne=<CORRESP>) {
	chomp($ligne);
	if ($ligne =~ /^$/) {
	    next;
	}
	@tableau=split(/\s+/, $ligne);
	if ($#tableau != 2) {
	    die "error in $name_correspond: not 3 columns at line '$ligne'\n";
	} else {
	    $tableau[2]=~ s/c//;
	    $tableau[1]=~ s/m//;
	    if ($tableau[1] =~ /c/ || $tableau[2] =~ /m/) {
		die "You have probably interverti cases and controls in file correspond.txt. It should be: haplo_name m_case_number c_control_number\n";
		}
	    $correspondance{$tableau[0]}->{"case"}=$tableau[1]+0;
	    $correspondance{$tableau[0]}->{"control"}=$tableau[2]+0;	
	}
    }
    my($clefs);
    #DEBUG
   # foreach $clefs (keys %correspondance) {
   # print "$clefs case: ", $correspondance{$clefs}->{"case"}, "\n";
   # 	print "$clefs, control: ",$correspondance{$clefs}->{"control"}, "\n";
   # }
    return(\%correspondance);
}

sub travail
{
    
    my($seuil)=shift;
    my($data_type)=shift;
    my($proportion_malades)=shift;
    my $low =shift;
    my $name_correspond=shift;
    my($ligne);
    my($temoin, $malade, $sequence, $nom, $debut, $ancetre);
    my($anc, $num_car, $prop_mal, $prop_tem);
    my(@tableau, @tab2);
    my($tem, $mal)=DefineAncDer($data_type);
    my($correspondance)=ReadCorrespond($name_correspond);

   #foreach my $clefs (keys %{$correspondance}) {
#	print "$clefs case ", $correspondance->{$clefs}->{"case"}, "\n";
#    	print "$clefs, control ",$correspondance->{$clefs}->{"control"}, "\n";
#    }

    while ($ligne=<STDIN>){
	chomp($ligne);
	if ($ligne =~ /^\s*H/) {
	    @tableau=split(/\s+/, $ligne);
	    $sequence=$tableau[1];
	    $debut=$tableau[0];
	    if ($debut =~ /^s*H000/){
		$ancetre=$sequence.$tem;
		print "$debut  $ancetre\n";
		next;
	    } else {
		#if ($debut =~ /^\s*H[0-9]{3}_m[0-9]{3}_c[0-9]{3}/) {
		 #   @tab2=split(/_/,$debut);
		    # print $tab2[0],"\n";
		  #  $temoin=$tab2[2];
		   # $temoin =~ s/c//;
		    # print STDERR "temoin=$temoin\n";
		   # $malade=$tab2[1];
		   # $malade =~ s/m//;
		   # if ($malade =~ /c/ || $temoin =~ /m/) {
		#	die "You have probably interverti cases and controls in file correspond.txt. It should be: haplo_name m_case_number c_control_number\n";
		 #   }
		$nom=$tableau[0];
		$malade=$correspondance->{$nom}->{"case"};
		$temoin=$correspondance->{$nom}->{"control"};
	#	print " $nom mal=$malade\n";   
		$prop_mal=$malade/($malade+$temoin);
		$prop_tem=$temoin/($malade+$temoin);
		#	print "M=$malade T=$temoin\n";
		#print "test=$test\n";
		#	if ($test==0) { # test: difference |mal-tem| >=seuil 
		#    if ($malade > $temoin && $malade-$temoin>=$seuil) {
		#$sequence.="G";
		#    } elsif ($malade < $temoin && $temoin-$malade>=$seuil) {
		#	$sequence.="C";
		#    } else {
		#	$sequence.="?";
		#    }
		#} elsif ($test==1) {
		#  if ($malade+$temoin==1) {
		#$sequence.="?";
		if ($low !=0 && $malade+$temoin==1) {
		    $sequence.="?";
		}  else {
		    if ($prop_mal>$proportion_malades+
			$seuil*sqrt($prop_mal*$prop_tem/($malade+$temoin))) {
			$sequence.=$mal;
		    } elsif ($prop_mal<$proportion_malades-
			     $seuil*sqrt($prop_mal*$prop_tem/($malade+$temoin))) {
			$sequence.=$tem;
		    } else {
			$sequence.="?";
		    }   
		}
	    }
	    
	    print "$nom  ", $sequence, "\n";
	    #"_m$malade", "_c$temoin\t", $sequence, "\n";
	    
	} elsif ($ligne =~ /dimension ntax=([0-9]+) nchar=([0-9]+);/) {
	    $num_car=$2+1;
	    print "dimension ntax=$1 nchar=", $num_car, ";\n";
	} elsif ($ligne =~ /format symbols=\"([0-9ATGCU]+)\"/) {
	    my($format)=$1;
	    my($format_old)=$1;
	    $format =~ tr/GC//d;
	    $ligne =~ s/$format_old/${format}CG/;
	    print $ligne, "\n";
	} elsif ($ligne =~ /ancstates\s+\*anc\s+vector\s*=\s*([0-9ATCG]+)\s*;/) {
	    $anc=$1;
	    $anc=$anc.$tem;
	    $ligne =~ s/$1/$anc/;
	    print $ligne,"\n";
	} elsif ($ligne=~ /begin paup;/) {
	    print $ligne,"\n";
	    print "exclude $num_car; \n";
	} elsif ($ligne=~ /\s*describetrees/) {
	    print "include $num_car;\n";
	    print $ligne,"\n";
	} elsif ($ligne =~ /^\s*([0-9]+)\s+([0-9]+)$/) {
	    $num_car=$2+1;
	    print "$1\t$num_car\n";
	} else {
	    print $ligne, "\n";
	}
    }
}

sub usage {
    my $msg =shift;
    my($progname) =shift;
    print STDERR "Error! ".$msg;
    print STDERR "usage :$progname [options]\n";
    print STDERR " Options :\n";
    print STDERR "    [-h]  this help\n";
    print STDERR "     -i   input file\n";
    print STDERR "     -j   input2 file (correspond.txt)\n";
    print STDERR "     -o   output file\n";
    print STDERR "     -t   data type: SNP or DNA\n";
# ancienne option -t test: 0= mal-tem>seuil 1= seuil proportion0+/-sqr(pq/n)]
    print STDERR "     -p   proportion of cases in the whole data set\n";
    print STDERR "    [-l]  if -l is present, it forces the state of S to be ? for haplotypes carried by only one individual\n"; 
}

sub main
{
    my($progname);
    my($seuil, $test, $proportion);
    
    getopts('ho:i:j:s:t:p:l');
    
    
    if ($opt_h) {
	($progname = $0) =~ s|^.*/([^/]*)$|$1|;
	usage("",$progname);
	exit (1);
    }
    
    if ($opt_i) {
	open(STDIN, '<', $opt_i) or die "ouverture impossible de $opt_i : $!" ;
    }
    
    my $correspond_name;
    if ($opt_j) {
	$correspond_name=$opt_j;
    } else {
	$correspond_name="correspond.txt"
	}
    if ($opt_o) {
	open(STDOUT, '>', $opt_o) or die "ouverture impossible de $opt_o : $!" ;
    }
    if ($opt_s) {
	$seuil=$opt_s;
    } else {
	usage("The sigma parameter is not defined!!\n", $progname);
    } 
    my($data_type);
    if (defined($opt_t)) {
	if ($opt_t =~ /[Dd][Nn][Aa]/) {
	    $data_type=1;
	} elsif ($opt_t =~ /[Ss][Nn][Ps]/) {
	    $data_type=0;
	} else {
	    usage("The data type (SNP or DNA) is missing\n", $progname);
	}
	# if (defined($opt_t)) {
	#	if ($opt_t==0) {
	#	    $test=0;
	#	} elsif ($opt_t==1) {
	#	    $test=1;
	#	} else {
	#	    $test=-999;
	#	    print STDERR "illegal value of opt_t\n";
	#	}
	#  } else {
	#	die "manque le numero du test: 0: mal-tem=seuil  1: seuil=P0+/-sqr(pq/n)!!\n";
	# }    
	if ($opt_p) {
	    $proportion=$opt_p;
	} else {
	    usage("The proportion of cases in the sample is missing!\n", $progname);
	}
	my($low);
	# Si $low !=0, alors on met ? si un seul cas ou 1 seul controle

	if ($opt_l) {
	    $low=1;
	} else {
	    $low=0;
	}
	travail($seuil, $data_type,  $proportion, $low, $correspond_name);
	
    }
}


main;
